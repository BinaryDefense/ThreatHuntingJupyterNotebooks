// To install this function in your Microsoft Sentinel:
// 1) Copy and paste the code below into query window in the "Logs" interface
// 2) Click the Save drop-down button and Save As... function named "Sysmon"
// Now you can use "Sysmon" as a data source, just like it was a table name.
let timeframe = "{time_range}";
let EventData = Event
| where Source == "Microsoft-Windows-Sysmon"
| extend RenderedDescription = tostring(split(RenderedDescription, ":")[0])
| extend DeviceName = replace("accountspayableoutsourcing.com", "APO", Computer)
| project TimeGenerated, Source, EventID, DeviceName, UserName, EventData, RenderedDescription
| extend EvData = parse_xml(EventData)
| extend EventDetail = EvData.DataItem.EventData.Data
| project-away EventData, EvData,UserName
;
let SysmonEvent1_ProcessCreate=() {
let processEvents = EventData
| where EventID == 1
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"]) // This is unique to sysmon as it create a unique Guid for each process.
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend ProcessPath = tostring(EventDetail.[4].["#text"])
| extend FileVersion = tostring(EventDetail.[5].["#text"])
| extend FileDescription = tostring(EventDetail.[6].["#text"])
| extend FileProduct = tostring(EventDetail.[7].["#text"])
| extend FileCompany = tostring(EventDetail.[8].["#text"])
| extend FileName = tostring(EventDetail.[9].["#text"])
| extend ProcessCommandLine = tostring(EventDetail.[10].["#text"])
| extend FilePath = tostring(EventDetail.[11].["#text"])
| extend AccountName = tostring(EventDetail.[12].["#text"] )
| extend UserLogonGuid = tostring(EventDetail.[13].["#text"])
| extend UserLogonId = EventDetail.[14].["#text"]
| extend UserSessionId = toint(EventDetail.[15].["#text"])
| extend ProcessIntegrityLevel = tostring(EventDetail.[16].["#text"])
| extend Hashes = tostring(EventDetail.[17].["#text"])
| extend InitiatingProcessGuid = tostring(EventDetail.[18].["#text"])
| extend InitiatingProcessId = toint(EventDetail.[19].["#text"])
| extend InitiatingProcessFile = tostring(EventDetail.[20].["#text"])
| extend InitiatingProcessCommandLine = tostring(EventDetail.[21].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| parse kind=regex Hashes with * '(SHA1|SHA256)=' hash
| project-away EventDetail, RuleName, Hashes
;
processEvents;
};
let SysmonEvent2_FileCreateTime=() {
let processEvents = EventData
| where EventID == 2
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"])
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend ProcessPath = tostring(EventDetail.[4].["#text"])
| extend FilePath = tostring(EventDetail.[5].["#text"])
| extend FileCreationTime = EventDetail.[6].["#text"]
| extend FilePreviousCreationTime = EventDetail.[7].["#text"]
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent3_NetworkConnect=() {
let processEvents = EventData
| where EventID == 3
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used)
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"])
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend ProcessPath = tostring(EventDetail.[4].["#text"])
| extend AccountName = tostring(EventDetail.[5].["#text"])
| extend Protocol = tostring(EventDetail.[6].["#text"])
| extend ConnectionInitiated = tobool(EventDetail.[7].["#text"])
| extend SourceIsIpv6 = tobool(EventDetail.[8].["#text"])
| extend SourceIp = tostring(EventDetail.[9].["#text"])
| extend SourceHostname = tostring(EventDetail.[10].["#text"])
| extend SourcePort = toint(EventDetail.[11].["#text"])
| extend SourcePortName = tostring(EventDetail.[12].["#text"])
| extend DestinationIsIpv6 = tobool(EventDetail.[13].["#text"])
| extend DestinationIp = tostring(EventDetail.[14].["#text"])
| extend DestinationHostname = tostring(EventDetail.[15].["#text"])
| extend DestinationPort = toint(EventDetail.[16].["#text"])
| extend DestinationPortName = tostring(EventDetail.[17].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent4_ServiceStateChange=() {
let processEvents = EventData
| where EventID == 4
| extend TimeStamp = EventDetail.[0].["#text"]
| extend ServiceState = tostring(EventDetail.[1].["#text"])
| extend SysmonSchema = tostring(EventDetail.[2].["#text"])
| extend SysmonSchemaVersion = tostring(EventDetail.[3].["#text"])
| project-away EventDetail
;
processEvents;
};
let SysmonEvent5_ProcessTerminate=() {
let processEvents = EventData
| where EventID == 5
| extend RulenName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"])
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend ProcessPath = tostring(EventDetail.[4].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent6_DriverLoad=() {
let processEvents = EventData
| where EventID == 6
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend FileName = tostring(EventDetail.[2].["#text"])
| extend Hashes = tostring(EventDetail.[3].["#text"])
| extend IsSigned = tostring(EventDetail.[4].["#text"])
| extend Signer = tostring(EventDetail.[5].["#text"])
| extend SignatureStatus = tostring(EventDetail.[6].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| parse kind=regex Hashes with * '(SHA1|SHA256)=' hash
| project-away EventDetail
| extend RuleName, Hashes
;
processEvents;
};
let SysmonEvent7_ImageLoad=() {
let processEvents = EventData
| where EventID == 7
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"])
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend ProcessPath = tostring(EventDetail.[4].["#text"])
| extend FileName = tostring(EventDetail.[5].["#text"])
| extend FileVersion = tostring(EventDetail.[6].["#text"])
| extend FileDescription = tostring(EventDetail.[7].["#text"])
| extend FileProduct = tostring(EventDetail.[8].["#text"])
| extend FileCompany = tostring(EventDetail.[9].["#text"])
| extend Hashes = tostring(EventDetail.[11].["#text"])
| extend IsSigned = tostring(EventDetail.[12].["#text"])
| extend Signer = tostring(EventDetail.[13].["#text"])
| extend SignatureStatus = tostring(EventDetail.[14].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| parse kind=regex Hashes with * '(SHA1|SHA256)=' hash
| project-away EventDetail, RuleName, Hashes
;
processEvents;
};
let SysmonEvent8_CreateRemoteThread=() {
let processEvents = EventData
| where EventID == 8
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"])
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend ProcessPath = tostring(EventDetail.[4].["#text"])
| extend TargetProcessGuid = tostring(EventDetail.[5].["#text"])
| extend TargetProcessId = toint(EventDetail.[6].["#text"])
| extend TargetProcessPath = tostring(EventDetail.[7].["#text"])
| extend NewThreadID = toint(EventDetail.[8].["#text"])
| extend ThreadStartAddress = tostring(EventDetail.[9].["#text"])
| extend ThreadStartModule = tostring(EventDetail.[10].["#text"])
| extend ThreadStartFunction = tostring(EventDetail.[11].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent9_RawAccessRead=() {
let processEvents = EventData
| where EventID == 9
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"])
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend ProcessPath = tostring(EventDetail.[4].["#text"])
| extend TargetDevice = tostring(EventDetail.[5].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent10_ProcessAccess=() {
let processEvents = EventData
| where EventID == 10
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"])
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend ThreadId = toint(EventDetail.[4].["#text"])
| extend ProcessPath = tostring(EventDetail.[5].["#text"])
| extend TargetProcessGuid = tostring(EventDetail.[6].["#text"])
| extend TargetProcessId = toint(EventDetail.[7].["#text"])
| extend TargetProcessPath = tostring(EventDetail.[8].["#text"]),process_granted_access = EventDetail.[9].["#text"]
| extend ProcessCallTrace = tostring(EventDetail.[10].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent11_FileCreate=() {
let processEvents = EventData
| where EventID == 11
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"])
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend ProcessPath = tostring(EventDetail.[4].["#text"])
| extend FileName = tostring(EventDetail.[5].["#text"])
| extend FileCreationTime = EventDetail.[6].["#text"]
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent12_RegistryObjectAddDel=() {
let processEvents = EventData
| where EventID == 12
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend EventType = tostring(EventDetail.[1].["#text"])
| extend TimeStamp = EventDetail.[2].["#text"]
| extend ProcessGuid = tostring(EventDetail.[3].["#text"])
| extend ProcessId = toint(EventDetail.[4].["#text"])
| extend ProcessPath = tostring(EventDetail.[5].["#text"])
| extend RegistryKey = tostring(EventDetail.[6].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent13_RegistrySetValue=() {
let processEvents = EventData
| where EventID == 13
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend EventType = tostring(EventDetail.[1].["#text"])
| extend TimeStamp = EventDetail.[2].["#text"]
| extend ProcessGuid = tostring(EventDetail.[3].["#text"])
| extend ProcessId = toint(EventDetail.[4].["#text"])
| extend ProcessPath = tostring(EventDetail.[5].["#text"])
| extend RegistryKey = tostring(EventDetail.[6].["#text"])
| extend RegistryKeyDetails = tostring(EventDetail.[7].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent14_RegistryObjectRename=() {
let processEvents = EventData
| where EventID == 14
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend EventType = tostring(EventDetail.[1].["#text"])
| extend TimeStamp = EventDetail.[2].["#text"]
| extend ProcessGuid = tostring(EventDetail.[3].["#text"])
| extend ProcessId = toint(EventDetail.[4].["#text"])
| extend ProcessPath = tostring(EventDetail.[5].["#text"])
| extend RegistryKey = tostring(EventDetail.[6].["#text"])
| extend RegistryKeyNewName = tostring(EventDetail.[7].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent15_FileCreateStreamHash=() {
let processEvents = EventData
| where EventID == 15
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"])
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend ProcessPath = tostring(EventDetail.[4].["#text"])
| extend FileName = tostring(EventDetail.[5].["#text"])
| extend FileCreationTime = EventDetail.[6].["#text"]
| extend Hashes = tostring(EventDetail.[7].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| parse kind=regex Hashes with * '(SHA1|SHA256)=' hash
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent16_ConfigChange=() {
let processEvents = EventData
| where EventID == 16
| extend TimeStamp = EventDetail.[0].["#text"]
| extend sysmon_configuration = tostring(EventDetail.[1].["#text"])
| extend sysmon_configuration_hash = tostring(EventDetail.[2].["#text"])
| project-away EventDetail
;
processEvents;
};
let SysmonEvent17_CreateNamedPipe=() {
let processEvents = EventData
| where EventID == 17
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[2].["#text"]
| extend ProcessGuid = tostring(EventDetail.[3].["#text"])
| extend ProcessId = toint(EventDetail.[4].["#text"])
| extend PipeName = tostring(EventDetail.[5].["#text"])
| extend ProcessPath = tostring(tostring(EventDetail.[6].["#text"]))
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent18_ConnectNamedPipe=() {
let processEvents = EventData
| where EventID == 18
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend EventType = tostring(EventDetail.[1].["#text"])
| extend TimeStamp = EventDetail.[2].["#text"]
| extend ProcessGuid = tostring(EventDetail.[3].["#text"])
| extend ProcessId = toint(EventDetail.[4].["#text"])
| extend PipeName = tostring(EventDetail.[5].["#text"])
| extend ProcessPath = tostring(EventDetail.[6].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent19_WMIEventFilter=() {
let processEvents = EventData
| where EventID == 19
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend EventType = tostring(EventDetail.[1].["#text"])
| extend TimeStamp = EventDetail.[2].["#text"]
| extend WmiOperation = tostring(EventDetail.[3].["#text"])
| extend AccountName = tostring(EventDetail.[4].["#text"])
| extend WmiNameSpace = tostring(EventDetail.[5].["#text"])
| extend WmiFilterName = tostring(EventDetail.[6].["#text"])
| extend WmiQuery = tostring(EventDetail.[7].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent20_WMIEventConsumer=() {
let processEvents = EventData
| where EventID == 20
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend EventType = tostring(EventDetail.[1].["#text"])
| extend TimeStamp = EventDetail.[2].["#text"]
| extend WmiOperation = tostring(EventDetail.[3].["#text"])
| extend AccountName = tostring(EventDetail.[4].["#text"])
| extend WmiConsumerName = tostring(EventDetail.[5].["#text"])
| extend WmiConsumerType = tostring(EventDetail.[6].["#text"])
| extend WmiConsumerDestination = tostring(EventDetail.[7].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent21_WMIEventConsumerToFilter=() {
let processEvents = EventData
| where EventID == 21
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend EventType = tostring(EventDetail.[1].["#text"])
| extend TimeStamp = EventDetail.[2].["#text"]
| extend WmiOperation = tostring(EventDetail.[3].["#text"])
| extend AccountName = tostring(EventDetail.[4].["#text"])
| extend WmiConsumerPath = tostring(EventDetail.[5].["#text"])
| extend Type = tostring(EventDetail.[6].["#text"])
| extend WmiFilterPath = tostring(EventDetail.[7].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent22_DNSEvents=() {
let processEvents = EventData
| where EventID == 22
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"])
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend DnsQueryName = tostring(EventDetail.[4].["#text"])
| extend DnsQueryStatus = tostring(EventDetail.[5].["#text"])
| extend DnsQueryResults = tostring(EventDetail.[6].["#text"])
| extend ProcessPath = tostring(EventDetail.[7].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent23_DeleteEvents=() {
let deleteEvents = EventData
| where EventID == 23
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"])
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend AccountName = tostring(EventDetail.[4].["#text"])
| extend InitiatingProcessFile = tostring(EventDetail.[5].["#text"])
| extend FileName = tostring(EventDetail.[6].["#text"])
| extend FileHash = tostring(EventDetail.[7].["#text"])
| extend IsExecutable = tostring(EventDetail[8].["#text"])
| extend Archived = tostring(EventDetail[9].["#text"])
| parse RuleName with * 'TechniqueId=' TechniqueId ',' * 'TechniqueName=' TechniqueName ',' * 'PhaseName=' PhaseName
| parse kind=regex file_delete_hashes with '(SHA1|SHA256)=' file_delete_hashes
| project-away EventDetail, RuleName
;
deleteEvents;
};
let SysmonEvent24_ClipboardChange=() {
let processEvents = EventData
| where EventID == 24
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"])
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend ProcessPath = tostring(EventDetail.[4].["#text"])
| extend Session = EventDetail.[5].["#text"]
| extend ClientInfo = tostring(EventDetail.[6].["#text"])
| extend Hash = tostring(EventDetail.[7].["#text"])
| extend Archived = tostring(EventDetail.[8].["#text"])
| parse kind=regex hash with * '(SHA1|SHA256)=' hash
| project-away EventDetail, RuleName
;
processEvents;
};
let SysmonEvent25_ProcessTampering=() {
let processEvents = EventData
| where EventID == 25
| extend RuleName = tostring(EventDetail.[0].["#text"]) // Parsed but never used
| extend TimeStamp = EventDetail.[1].["#text"]
| extend ProcessGuid = tostring(EventDetail.[2].["#text"])
| extend ProcessId = toint(EventDetail.[3].["#text"])
| extend ProcessPath = tostring(EventDetail.[4].["#text"])
| extend ActionType = tostring(EventDetail.[5].["#text"])
| project-away EventDetail, RuleName
;
processEvents;
};
(union isfuzzy=true
SysmonEvent1_ProcessCreate,SysmonEvent2_FileCreateTime,SysmonEvent3_NetworkConnect,SysmonEvent4_ServiceStateChange,SysmonEvent5_ProcessTerminate,
SysmonEvent6_DriverLoad,SysmonEvent7_ImageLoad,SysmonEvent8_CreateRemoteThread,SysmonEvent9_RawAccessRead,SysmonEvent10_ProcessAccess,
SysmonEvent11_FileCreate,SysmonEvent12_RegistryObjectAddDel,SysmonEvent13_RegistrySetValue,SysmonEvent14_RegistryObjectRename,
SysmonEvent15_FileCreateStreamHash,SysmonEvent16_ConfigChange,SysmonEvent17_CreateNamedPipe,SysmonEvent18_ConnectNamedPipe,
SysmonEvent19_WMIEventFilter,SysmonEvent20_WMIEventConsumer,SysmonEvent21_WMIEventConsumerToFilter,SysmonEvent22_DNSEvents,SysmonEvent23_DeleteEvents,SysmonEvent24_ClipboardChange,SysmonEvent25_ProcessTampering)

